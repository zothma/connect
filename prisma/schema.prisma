generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Advert {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  body        String    @default("") @db.Text
  domainId    Int
  typeId      Int
  ownerId     String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  gradient AdvertGradient?
  type     ProfessionalBridge @relation(fields: [typeId], references: [id])
  owner    User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  domain   RomeDomain         @relation(fields: [domainId], references: [id])

  bookmarkedBy User[] @relation("bookmark")

  @@map("advert")
}

model AdvertGradient {
  id       Int    @id @default(autoincrement())
  originX  Int
  originY  Int
  colorId  Int
  advertId String @unique

  advert Advert      @relation(fields: [advertId], references: [id], onDelete: Cascade)
  color  AdvertColor @relation(fields: [colorId], references: [id])

  @@map("advert_gradient")
}

model AdvertColor {
  id         Int @id @default(autoincrement())
  hue        Int
  saturation Int
  lightness  Int

  gradients AdvertGradient[]

  @@unique(name: "hsl_unique_key", [hue, saturation, lightness])
  @@map("advert_color")
}

model ProfessionalBridge {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.Text

  adverts Advert[]

  @@map("professional_bridge")
}

model RomeDomain {
  id   Int    @id @default(autoincrement())
  name String @unique

  adverts Advert[]

  @@map("rome_domain")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  first_name    String?
  last_name     String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts  Account[]
  adverts   Advert[]
  bookmarks Advert[]  @relation("bookmark")

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}
